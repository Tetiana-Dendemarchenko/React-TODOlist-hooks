{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputFocus","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA4DeA,MA1Df,SAAkBC,GAAQ,IAAD,EACIC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD7C,mBACfC,EADe,KACRC,EADQ,KAGfC,EAAaC,iBAAO,MAE1BC,qBAAU,WACNF,EAAWG,QAAQC,WAGvB,IAAMC,EAAe,SAAAC,GACjBP,EAAUO,EAAEC,OAAOV,QAcvB,OACI,sBAAMW,UAAU,YAAYC,SAZN,SAAAH,GACtBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,KAIT,SACKL,EAAME,KACH,qCACA,uBACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EAAOoB,KAAK,OACnBV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAET,wBAAQQ,UAAU,mBAAlB,uBAIA,qCACA,uBACAQ,KAAK,OACLC,YAAY,2BACZpB,MAAOC,EAAOoB,KAAK,OACnBV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAEL,wBAAQQ,UAAU,cAAlB,4B,gBCTDa,MAtCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EACjC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAH8C,mBAClDD,EADkD,KAC5C8B,EAD4C,KAczD,OAAG9B,EAAKe,GACG,cAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,sBAAKrB,UAAWoB,EAAKE,WAAa,oBAAsB,WAAxD,UAEI,qBAAmBC,QAAS,kBAAMR,EAAaK,EAAKjB,KAApD,SACKiB,EAAKb,MADAa,EAAKjB,IAGf,sBAAKH,UAAU,QAAf,UACI,cAAC,IAAD,CACAuB,QAAS,kBAAMP,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEV,cAAC,IAAD,CACAuB,QAAS,kBAAML,EAAQ,CAACf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QACjDP,UAAU,mBAXRqB,OC+BHG,MAnDf,WAAqB,IAAD,EACUrC,mBAAS,IADnB,mBACT2B,EADS,KACFW,EADE,KAsCjB,OACI,gCACI,qDACA,cAAC,EAAD,CAAUxB,SAtCD,SAAAmB,GACZ,GAAIA,EAAKb,OAAQ,QAAQmB,KAAKN,EAAKb,MAAnC,CAIA,IAAMoB,EAAQ,CAAIP,GAAJ,mBAAaN,IAE3BW,EAASE,OAgCN,cAAC,EAAD,CACAb,MAAOA,EAAOC,aAfA,SAAAZ,GACjB,IAAIyB,EAAed,EAAMK,KAAI,SAAAC,GAIzB,OAHGA,EAAKjB,KAAOA,IACXiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IASNZ,WAtBY,SAAAb,GACf,IAAM0B,EAAY,YAAIf,GAAOgB,QAAO,SAAAV,GAAI,OAAIA,EAAKjB,KAAOA,KAExDsB,EAASI,IAoBNZ,WAhCY,SAACc,EAAQC,GACpBA,EAASzB,OAAQ,QAAQmB,KAAKM,EAASzB,OAI3CkB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAK/B,KAAO4B,EAASC,EAAWE,eCV5DC,MARf,WACE,OACE,qBAAKnC,UAAU,WAAf,SACE,cAAC,EAAD,OCHNoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.07110dc4.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react';\n\nfunction TodoForm(props) {\n    const[input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputFocus = useRef(null);\n\n    useEffect(() => {\n        inputFocus.current.focus();\n    })\n\n    const handleChange = e => {\n        setInput (e.target.value)\n    }\n\n    const controlSubmitting = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random() * 1000),\n            text: input\n        })\n\n        setInput('');\n    };\n\n    return (\n        <form className='todo-form' onSubmit={controlSubmitting}>\n            {props.edit ? (\n                <>\n                <input\n                    type='text'\n                    placeholder='Update Your Task'\n                    value={input} name='text'\n                    className='todo-input edit'\n                    onChange={handleChange}\n                    ref={inputFocus}\n                />\n                <button className='todo-button edit'>Update</button>\n                </>\n                ) :\n                (\n                <>\n                <input\n                type='text'\n                placeholder='Please, Create Your Task'\n                value={input} name='text'\n                className='todo-input'\n                onChange={handleChange}\n                ref={inputFocus}\n                />\n                <button className='todo-button'>Add Task</button>\n                </>\n                )\n            }\n\n        </form>\n    )\n}\n\nexport default TodoForm","import React, {useState} from 'react';\nimport TodoForm from \"./TodoForm\";\nimport {RiCloseCircleLine, TiEdit} from \"react-icons/all\";\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: ''\n    })\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value)\n        setEdit({\n            id: null,\n            value: ''\n        })\n    }\n\n    if(edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n             key={index}>\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className='icons'>\n                <RiCloseCircleLine\n                onClick={() => removeTodo(todo.id)}\n                className='delete-icon'\n                />\n                <TiEdit\n                onClick={() => setEdit({id: todo.id, value: todo.text})}\n                className='edit-icon'\n                />\n            </div>\n        </div>\n    ))\n}\n\nexport default Todo","import React, {useState} from 'react';\nimport TodoForm from \"./TodoForm\";\nimport Todo from \"./Todo\";\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\n            return;\n        }\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item))\n        );\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr);\n    }\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if(todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos);\n    }\n\n   return (\n       <div>\n           <h1>MY PLANS FOR TODAY:</h1>\n           <TodoForm onSubmit={addTodo} />\n           <Todo\n           todos={todos} completeTodo={completeTodo}\n           removeTodo={removeTodo}\n           updateTodo={updateTodo}\n           />\n       </div>\n   )\n}\n\nexport default TodoList","import React from 'react';\nimport './App.css';\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}